// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package totdb

import (
	"context"
	"time"
)

const createBaby = `-- name: CreateBaby :one
INSERT INTO babies (id, name, timezone)
VALUES (?, ?, ?)
RETURNING id, name, timezone
`

type CreateBabyParams struct {
	ID       string
	Name     string
	Timezone string
}

func (q *Queries) CreateBaby(ctx context.Context, arg CreateBabyParams) (Baby, error) {
	row := q.db.QueryRowContext(ctx, createBaby, arg.ID, arg.Name, arg.Timezone)
	var i Baby
	err := row.Scan(&i.ID, &i.Name, &i.Timezone)
	return i, err
}

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (baby_id, created_at, ounces, feed_type)
VALUES (?, ?, ?, ?)
RETURNING id, baby_id, created_at, feed_type, ounces
`

type CreateFeedParams struct {
	BabyID    string
	CreatedAt time.Time
	Ounces    int64
	FeedType  int64
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.BabyID,
		arg.CreatedAt,
		arg.Ounces,
		arg.FeedType,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.BabyID,
		&i.CreatedAt,
		&i.FeedType,
		&i.Ounces,
	)
	return i, err
}

const createSoil = `-- name: CreateSoil :one
INSERT INTO soils (baby_id, created_at, wet, soil)
VALUES (?, ?, ?, ?)
RETURNING id, baby_id, created_at, wet, soil
`

type CreateSoilParams struct {
	BabyID    string
	CreatedAt time.Time
	Wet       int64
	Soil      int64
}

func (q *Queries) CreateSoil(ctx context.Context, arg CreateSoilParams) (Soil, error) {
	row := q.db.QueryRowContext(ctx, createSoil,
		arg.BabyID,
		arg.CreatedAt,
		arg.Wet,
		arg.Soil,
	)
	var i Soil
	err := row.Scan(
		&i.ID,
		&i.BabyID,
		&i.CreatedAt,
		&i.Wet,
		&i.Soil,
	)
	return i, err
}

const getBaby = `-- name: GetBaby :one
SELECT id, name, timezone
FROM babies
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetBaby(ctx context.Context, id string) (Baby, error) {
	row := q.db.QueryRowContext(ctx, getBaby, id)
	var i Baby
	err := row.Scan(&i.ID, &i.Name, &i.Timezone)
	return i, err
}

const getLastFoodTime = `-- name: GetLastFoodTime :one
SELECT created_at
FROM feeds
WHERE baby_id = ? AND feed_type = 1 AND ounces > 0
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastFoodTime(ctx context.Context, babyID string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getLastFoodTime, babyID)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const getLastMilkTime = `-- name: GetLastMilkTime :one
SELECT created_at
FROM feeds
WHERE baby_id = ? AND feed_type = 0 AND ounces > 0
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastMilkTime(ctx context.Context, babyID string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getLastMilkTime, babyID)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const getLastSoilTime = `-- name: GetLastSoilTime :one
SELECT created_at
FROM soils
WHERE baby_id = ? AND soil = 1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastSoilTime(ctx context.Context, babyID string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getLastSoilTime, babyID)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const getLastWetTime = `-- name: GetLastWetTime :one
SELECT created_at
FROM soils
WHERE baby_id = ? AND wet = 1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastWetTime(ctx context.Context, babyID string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getLastWetTime, babyID)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT id, baby_id, created_at, feed_type, ounces
FROM feeds
WHERE baby_id = ?
ORDER BY created_at DESC
LIMIT 10
`

func (q *Queries) ListFeeds(ctx context.Context, babyID string) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds, babyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.BabyID,
			&i.CreatedAt,
			&i.FeedType,
			&i.Ounces,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSoils = `-- name: ListSoils :many
SELECT id, baby_id, created_at, wet, soil
FROM soils
WHERE baby_id = ?
ORDER BY created_at DESC
LIMIT 10
`

func (q *Queries) ListSoils(ctx context.Context, babyID string) ([]Soil, error) {
	rows, err := q.db.QueryContext(ctx, listSoils, babyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Soil
	for rows.Next() {
		var i Soil
		if err := rows.Scan(
			&i.ID,
			&i.BabyID,
			&i.CreatedAt,
			&i.Wet,
			&i.Soil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimezone = `-- name: UpdateTimezone :one
UPDATE babies
SET timezone = ?
WHERE id = ?
RETURNING id, name, timezone
`

type UpdateTimezoneParams struct {
	Timezone string
	ID       string
}

func (q *Queries) UpdateTimezone(ctx context.Context, arg UpdateTimezoneParams) (Baby, error) {
	row := q.db.QueryRowContext(ctx, updateTimezone, arg.Timezone, arg.ID)
	var i Baby
	err := row.Scan(&i.ID, &i.Name, &i.Timezone)
	return i, err
}
